# 1. Pré-processamento
max_words = 10000  # Número máximo de palavras no vocabulário
max_seq_length = 500  # Tamanho máximo das sequências

tokenizer = Tokenizer(num_words=max_words)
tokenizer.fit_on_texts(lyrics)  # Ajusta o tokenizador com os dados das letras
sequences = tokenizer.texts_to_sequences(lyrics)  # Converte as letras em sequências de inteiros
# Preenche as sequências para que todas tenham o mesmo comprimento
X = pad_sequences(sequences, maxlen=max_seq_length)
label_encoder = LabelEncoder()
y = label_encoder.fit_transform(genras)
X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)


# 2. Construção do Modelo LSTM
model = Sequential()
model.add(Embedding(input_dim=max_words, output_dim=128, input_length=max_seq_length))
model.add(LSTM(128, return_sequences=True))
model.add(Dropout(0.2))
model.add(LSTM(64))
model.add(Dropout(0.2))
model.add(Dense(64, activation='relu'))
model.add(Dense(1, activation='sigmoid'))  # Para classificação binária, use 'softmax' para múltiplas classes


# 3. Compilação do modelo
model.compile(optimizer='adam', loss='binary_crossentropy', metrics=['accuracy'])


# 4. Treinamento
model.fit(X_train, y_train, epochs=10, batch_size=32, validation_split=0.2)

# 5. Avaliação no conjunto de teste
loss, accuracy = model.evaluate(X_test, y_test)
print(f'Test accuracy: {accuracy}')